# Difference
The only difference is the execution context between promise and async/await.

    When a Promise is created and the asynchronous operation is started, 
    the code after the Promise creation continues to execute synchronously. 
    When the Promise is resolved or rejected, the attached callback function is added to the microtask queue. 
    The microtask queue is processed after the current task has been completed but before the next task is processed from the task queue. 
    This means that any code that follows the creation of the Promise will execute before the callback function attached to the Promise is executed.

    On the other hand, with Async/Await, 
    the await keyword causes the JavaScript engine to pause the execution of the async function until the Promise is resolved or rejected. 
    While the async function waits for the Promise to resolve, 
    it does not block the call stack, and any other synchronous code can be executed. 
    Once the Promise is resolved, the execution of the async function resumes, 
    and the result of the Promise is returned. If rejected, it throws an error value.