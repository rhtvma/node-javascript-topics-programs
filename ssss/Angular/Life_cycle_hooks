# ngOnChanges
    ngOnChanges triggers following the modification of @Input bound class members. 
    Data bound by the @Input() decorator come from an external source. 
    When the external source alters that data in a detectable manner, it passes through the @Input property again.

    With this update, ngOnChanges immediately fires. It also fires upon initialization of input data. 
    The hook receives one optional parameter of type SimpleChanges. 
    This value contains information on the changed input-bound properties.

# ngOnInit
    ngOnInit fires once upon initialization of a component’s input-bound (@Input) properties. 
    The next example will look similar to the last one. 
    The hook does not fire as ChildComponent receives the input data. Rather, 
    it fires right after the data renders to the ChildComponent template.

# ngDoCheck
    ngDoCheck fires with every change detection cycle. Angular runs change detection frequently. 
    Performing any action will cause it to cycle. ngDoCheck fires with these cycles. 
    Use it with caution. It can create performance issues when implemented incorrectly.

    ngDoCheck lets developers check their data manually. They can trigger a new application date conditionally. 
    In conjunction with ChangeDetectorRef, developers can create their own checks for change detection.

# ngAfterContentInit
    ngAfterContentInit fires after the component’s content DOM initializes (loads for the first time). 
    Waiting on @ContentChild(ren) queries is the hook’s primary use-case.

    @ContentChild(ren) queries yield element references for the content DOM. As such, they are not available until after the content DOM loads. 
    Hence why ngAfterContentInit and its counterpart ngAfterContentChecked are used.

# ngAfterContentChecked
    ngAfterContentChecked fires after every cycle of change detection targeting the content DOM. 
    This lets developers facilitate how the content DOM reacts to change detection. 
    ngAfterContentChecked can fire frequently and cause performance issues if poorly implemented.

    ngAfterContentChecked fires during a component’s initialization stages too. 
    It comes right after ngAfterContentInit.

# ngAfterViewInit
    ngAfterViewInit fires once after the view DOM finishes initializing. 
    The view always loads right after the content. ngAfterViewInit waits on @ViewChild(ren) queries to resolve. 
    These elements are queried from within the same view of the component.

    In the example below, BComponent’s h3 header is queried. 
    ngAfterViewInit executes as soon as the query’s results are available.

# ngAfterViewChecked
    ngAfterViewChecked fires after any change detection cycle targeting the component’s view. 
    The ngAfterViewChecked hook lets developers facilitate how change detection affects the view DOM.

# ngOnDestroy
    ngOnDestroy fires upon a component’s removal from the view and subsequent DOM. 
    This hook provides a chance to clean up any loose ends before a component’s deletion.